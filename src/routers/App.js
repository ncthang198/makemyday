
// In App.js in a new project
// import notifee from '@notifee/react-native';
import Icon from 'react-native-vector-icons/FontAwesome'
import React, { useEffect, useRef } from 'react';
import { View, Text, Alert, } from 'react-native';
import { useDispatch, useSelector } from "react-redux";
Icon.loadFont();
import { LoadingView } from '../components';
import { AppNavigator } from "./navigator"
import messaging from '@react-native-firebase/messaging';
import PushNotificationIOS from "@react-native-community/push-notification-ios";
import { models } from "../models"
import * as schema from '../models/entity/Schema'
import { Provider } from 'react-redux';
import { store, persistor } from '../stores';
import { PersistGate } from 'redux-persist/integration/react'
var PushNotification = require("react-native-push-notification");


const App = () => {

  useEffect(() => {
    checkPermission()
    createListenerMessage();
  }, []);

  checkPermission = async () => {
    messaging().hasPermission()
      .then(enabled => {
        if (enabled == 1) {
          getFcmToken();
        } else {
          requestPermission();
        }
      }).catch(err => {
        console.log("ERROR: ", err)
      })
  }

  requestPermission = async () => {
    messaging().requestPermission()
      .then(() => {
        getFcmToken();
      })
      .catch(error => {
        Toast.show("Quyền nhận thông báo từ MyVnpost bị từ chối")
        console.log('permission rejected');
      });
  }

  getFcmToken = async () => {
    let fcmToken = await models.getFCMToken()
    // console.log(fcmToken, "checkkkk")
    if (!fcmToken) {
      fcmToken = await messaging().getToken();
      if (fcmToken) {
        await models.setFCMToken(fcmToken);
      } else {
        console.log("Lấy FCM Token thất bại")
      }
    } else {
      // console.log("==================Your Firebase Token is ok===================");
      // console.log(fcmToken);
    }
  }
  createListenerMessage = async () => {
    //Foreground
    messaging().onMessage((mess) => {
      // console.log(mess)
      pushNoti(mess)
    });
    messaging().setBackgroundMessageHandler(async remoteMessage => {
      console.log('Message handled in the background!', remoteMessage);
      pushNoti(remoteMessage)
    });
    const messageInCloseApp = await messaging().getInitialNotification();
    if (messageInCloseApp) {
      console.log("Open notification in quit app state")
      Alert.alert("Quit App")
    }
  }

  //Local push notification
  PushNotification.configure({
    onNotification: function (notification) {
      console.log("Open notification:", notification);
      notification.finish(PushNotificationIOS.FetchResult.NoData);
    },

  });
  pushNoti = (mess) => {
    PushNotification.createChannel(
      {
        channelId: "rnkit_channel_id", // (required)
        channelName: "RN Kit push notification channel", // (required)                  
      }
    );
    PushNotification.localNotification({
      /* Android Only Properties */
      channelId: "rnkit_channel_id", // (required) channelId, if the channel doesn't exist, it will be created with options passed above (importance, vibration, sound). Once the channel is created, the channel will not be update. Make sure your channelId is different if you change these options. If you have created a custom channel, it will apply options of the channel.

      /* iOS and Android properties */
      id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      title: mess.data.title, // (optional)
      message: mess.data.body, // (required)      
      playSound: true, // (optional) default: true
      soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)            
      userInfo: { data: { hello: "Hello world !" } }, // (optional) default: {} (using null throws a JSON value '<null>' error)
    });
  }
  return (
    <Provider store={store}>
      <PersistGate loading={null} persistor={persistor}>
        <LoadingView />
        <AppNavigator />
      </PersistGate>

    </Provider>
  );
}

export default App;